name: CI

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: farda_mcp_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    env:
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/farda_mcp_test
      APP_ENV: ci
      AUTH_SECRET: test-secret-key
      AUTH_ACCESS_TTL_MIN: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      working-directory: ./backend
      run: |
        ruff check .
    
    - name: Format check with ruff
      working-directory: ./backend
      run: |
        ruff format --check .
    
    - name: Run migrations
      working-directory: ./backend
      run: |
        python -m alembic upgrade head
    
    - name: Run tests (including auth multi-tenant tests)
      working-directory: ./backend
      run: |
        pytest -v tests/test_health.py tests/test_auth_multitenant.py
    
    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-results-${{ matrix.python-version }}
        path: backend/.pytest_cache

  web:
    name: Web CI
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['20.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
    
    - name: Install dependencies
      working-directory: ./web
      run: npm ci
    
    - name: Lint
      working-directory: ./web
      run: npm run lint
    
    - name: Type check
      working-directory: ./web
      run: npm run typecheck
    
    # Tests will be added in future prompts
    # - name: Run tests
    #   working-directory: ./web
    #   run: npm run test
    
    - name: Build
      working-directory: ./web
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
      run: npm run build
    
    - name: Upload build artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: web-build-artifacts-${{ matrix.node-version }}
        path: web/.next

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ops/docker/backend.Dockerfile
        push: false
        tags: farda-mcp-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ops/docker/web.Dockerfile
        push: false
        tags: farda-mcp-web:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
